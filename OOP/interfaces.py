from abc import ABC, abstractmethod

# üîπ Interface ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
class Animal(ABC):  
    @abstractmethod
    def eat(self):
        pass
    
    @abstractmethod
    def move(self):
        pass

# üîπ ‡¶è‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ï‡ßá ‡¶¨‡¶æ‡¶ß‡ßç‡¶Ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï‡¶≠‡¶æ‡¶¨‡ßá eat() ‡¶è‡¶¨‡¶Ç move() ‡¶á‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
class Dog(Animal):
    def eat(self):
        print("Dog is eating...")
    
    def move(self):
        print("Dog is running...")

class Fish(Animal):
    def eat(self):
        print("Fish is eating...")
    
    def move(self):
        print("Fish is swimming...")

# ‚úÖ ‡¶è‡¶ñ‡¶® Dog ‡¶è‡¶¨‡¶Ç Fish ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ï‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á eat() ‡¶ì move() ‡¶á‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
dog = Dog()
dog.eat()   # Output: Dog is eating...
dog.move()  # Output: Dog is running...

fish = Fish()
fish.eat()   # Output: Fish is eating...
fish.move()  # Output: Fish is swimming...
